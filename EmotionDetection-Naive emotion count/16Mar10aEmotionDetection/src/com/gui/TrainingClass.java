/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.gui;

import edu.stanford.nlp.tagger.maxent.MaxentTagger;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;

/**
 *
 * @author Shaik Riyaz
 */
public class TrainingClass extends javax.swing.JFrame {
    File file,file1,file2;
    /**
     * Creates new form TrainingClass
     */
    public TrainingClass() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 204, 204));
        jLabel2.setText("Training the Naive Count Classifier");

        jLabel1.setText("Choose File:");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("View Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Training..");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(174, 174, 174)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 165, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         JFileChooser fi = new JFileChooser();
        Component jPanel1 = null;
        fi.showOpenDialog(jPanel1);
        file = fi.getSelectedFile();
        String path = file.getAbsolutePath();
        jTextField1.setText(path);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
          
        try {
            String path = jTextField1.getText();    
            String cLine;
            
            BufferedReader br = new BufferedReader(new FileReader(path));
            
            while ((cLine = br.readLine()) != null) {
                jTextArea1.append(cLine + "\n");
            }
//            jTextArea1.setText("unhappy");
            String content= jTextArea1.getText();
            System.out.println(content);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
          
        try{
            MaxentTagger tagger = new MaxentTagger(
                "taggers/english-left3words-distsim.tagger");
 
        // The sample string
        //String sample = "This is a sample text";
 
        // The tagged string
       // String tagged = tagger.tagString(sample);
       //  System.out.println(tagged);
 
            String str,clean;
//            JFileChooser fi = new JFileChooser();
            String fname = jTextField1.getText();
//              String fname = file.getAbsolutePath();
            //    FileWriter fw = new FileWriter("D:/Offices file/Mugilan/JPJ1244-Effective Pattern Discovery/datasets/new.txt");
            //               BufferedWriter bwf=new BufferedWriter(fw);
            file1= new File("AfterStopWords-training.txt");
            if (!file1.exists()) 
            {
                 file1.createNewFile();
            }
            FileWriter wr = new FileWriter(file1);
            FileReader  fr=new FileReader(fname);
            BufferedReader br=new BufferedReader(fr);
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn=DriverManager.getConnection("jdbc:mysql://localhost:2016/project","root","root");
            Statement stmt =conn.createStatement();
            //String[] Stop = {"a", "about", "above", "above", "across", "after", "afterwards", "again", "against", "all", "almost", "alone", "along", "already", 	"also", "although", "always", "am", "among", "amongst", "amoungst", "amount", "an", "and", "another", "any", "anyhow", "anyone", "anything", "anyway", "anywhere", "are", "around", "as", "at", "back", "be", "became", "because", "become", "becomes", "becoming", "been", "before", 	"beforehand", "behind", "being", "below", "beside", "besides", "between", "beyond", "bill", "both", "bottom", "but", "by", "call", "can", "cannot", "cant", "co", "con", "could", "couldnt", "cry", "de", "describe", "detail", "do", "done", "down", "due", "during", "each", "eg", "eight", "either", 	"eleven", "else", "elsewhere", "empty", "enough", "etc", "even", "ever", "every", "everyone", "everything", "everywhere", "except", "few", "fifteen", "fify", "fill", "find", "fire", "first", "five", "for", "former", "formerly", "forty", "found", "four", "from", "front", "full", "further", "get", "give", "go", "had", "has", "hasnt", "have", "he", "hence", "her", "here", "hereafter", "hereby", "herein", "hereupon", "hers", "herself", "him", "himself", "his", "how", "however", "hundred", "ie", "if", "in", "inc", "indeed", "interest", "into", "is", "it", "its", 	"itself", "keep", "last", "latter", "latterly", "least", "less", "ltd", "made", "many", "may", "me", "meanwhile", "might", "mill", "mine", "more", 	"moreover", "most", "mostly", "move", "much", "must", "my", "myself", "name", "namely", "neither", "never", "nevertheless", "next", "nine", "no", "nobody", "none", "noone", "nor", "not", "nothing", "now", "nowhere", "of", "off", "often", "on", "once", "one", "only", "onto", "or", "other", 	"others", "otherwise", "our", "ours", "ourselves", "out", "over", "own", "part", "per", "perhaps", "please", "put", "rather", "re", "same", "see", "seem", "seemed", "seeming", "seems", "serious", "several", "she", "should", "show", "side", "since", "sincere", "six", "sixty", "so", "some", "somehow", "someone", "something", "sometime", "sometimes", "somewhere", "still", "such", "system", "take", "ten", "than", "that", "the", 	"their", "them", "themselves", "then", "thence", "there", "thereafter", "thereby", "therefore", "therein", "thereupon", "these", "they", "thickv", "thin", "third", "this", "those", "though", "three", "through", "throughout", "thru", "thus", "to", "together", "too", "top", "toward", "towards", 	"twelve", "twenty", "two", "un", "under", "until", "up", "upon", "us", "very", "via", "was", "we", "well", "were", "what", "whatever", "when", "whence", "whenever", "where", "whereafter", "whereas", "whereby", "wherein", "whereupon", "wherever", "whether", "which", "while", "whither", 	"who", "whoever", "whole", "whom", "whose", "why", "will", "with", "within", "without", "would", "yet", "you", "your", "yours", "yourself", "yourselves", "z", "zero"};
           while((str=br.readLine())!=null)
            {
                String[] str_array = str.split(":->");
                String string = str_array[0].replaceAll("[^a-zA-Z\\s]", "");
                string = string .toLowerCase();
              //  string=string.trim();
                System.out.println(string+"\n");
               /* String[] words= string.split(" ");
                for(int i=0; i<Stop.length; i++)
                {
                    for(int j=0; j<words.length;j++)
                    {
                        if(words[i].equals(Stop[j]))
                        {
                            words[i]=" ";
                         }
                    }
                }
                System.out.println(words[1]);*/
               Pattern stopWords = Pattern.compile("\\b(?:taken|zero|i|what|these|that|their|the|a|able|about|above|abroad|according|accordingly|across|actually|after|afterwards|again|against|ago|ahead|aint|all|allow|allows|almost|alone|along|alongside|already|also|although|always|am|amid|amidst|among|amongst|an|and|another|any|anybody|anyhow|anyone|anything|anyway|anyways|anywhere|apart|appear|appreciate|appropriate|are|arent|around|as|aside|asking|associate|at|available|away|awfully|backbackward|backwards|be|became|because|become|becomes|becoming|been|before|beforehand|begin|behind|being|believe|below|beside|besides|best|better|between|beyond|both|brief|but|by|came|can|cannot|cant|cant|caption|cause|causes|certain|certainly|changes|clearly|cmon|come|comes|concerning|consequently|consider|considering|contain|containing|contains|corresponding|could|couldnt|course|currently|dare|darent|definitely|described|despite|does|doesnt|doing|done|dont|did|didnt|different|directly|do|down|downwards|during|each|eight|eighty|either|else|elsewhere|end|ending|enough|entirely|especially|etc|even|ever|evermore|every|everybody|everyone|everything|everywhere|ex|exactly|example|except|fairly|far|farther|few|fewer|fifth|first|five|followed|following|follows|for|found|four|from|forever|former|formerly|forth|forward|further|furthermore|get|gets|getting|given|gives|go|gotten|greetings|goes|going|gone|got|had|hadnt|half|happens|hardly|has|hasnt|have|havent|having|he|hed|hell|hello|help|hence|her|here|hereafter|hereby|herein|heres|hereupon|hers|herself|hes|hi|him|himself|his|hit|her|hopefully|how|however|hundred||id|if|ignored|ill|im|immediate|in|inc|indeed|indicate|indicated|indicates|inner|inside|instead|into|inward|is|isnt|it|itd|itll|its|itself|ive|just|keep|keeps|kept|know|known|knows|last|lately|later|latter|latterly|least|less|lest|let|lets|like|liked|likely|likewise|little|look|looking|looks|low|lower|made|mainly|make|makes|many|may|maybe|maynt|me|mean|meantime|meanwhile|merely|might|mine|minus|miss|more|moreover|most|mostly|mr|mrs|much|must|mustnt|my|myself|name|namely|near|nearly|necessary|ne|neednt|needs|neither|never|neverf|neverless|nevertheless|new|next|nine|ninety|no|nobody|non|none|nonetheless|nor|normally|not|nothing|notwithstanding|novel|now|nowhere|obviously|of|off|often|oh|ok|okay|old|on|once|one|ones|ones|only|onto|opposite|or|other|others|otherwise|ought|oughtnt|our|ours|ourselves|out|outside|over|overall|own|particular|particularly|past|per|perhaps|placed|please|plus|possible|presumably|probably|provided|provides|que|quite|rather|really|reasonably|recent|recently|regarding|regardless|regards|relatively|respectively|right|round|said|same|saw|say|second|secondly|see|seeing|seem|seemed|seeming|seems|seen|self|selves|sensible|sent|serious|seriously|seven|several|shall|shant|she|shed|shell|shes|should|shouldnt|since|six|so|some|somebody|someday|somehow|someone|something|sometime|sometimes|somewhat|somewhere|soon|sorry|specified|specify|specifying|still|sub|such|sure|take|taken|taking|tell|tends|than|thank|thanks|thanx|that|thatll|thats|thats|thatve|the|their|theirs|them|themselves|then|thence|there|thereafter|thereby|thered|therefore|therein|therell|therere|theres|theres|thereupon|thereve|these|they|theyd|theyll|theyre|theyve|thing|things|think|third|thirty|this|thorough|thoroughly|those|though|three|through|throughout|thru|thus|till|to|toge|ther|too|took|toward|towards|tried|tries|truly|try|trying|twice|two|under|underneath|undoing|unfort|unately|unless|unlike|unlikely|until|unto|up|upon|upwards|us|use|used|useful|uses|using|usually|value|various|versus|very|via|vs|want|wants|was|wasnt|way|we|wed|welcome|well|went|were|werent|weve|what|whatever|whatll|whats|whatve|when|whence|whenever|where|whereafter|whereas|whereby|wherein|wheres|whereupon|wherever|whether|which|whichever|while|whilst|whither|who|whod|whoever|whole|wholl|whom|whomever|whos|whose|why|will|willing|wish|with|within|without|wonder|wont|would|wouldnt|yes|yet|you|youd|youll|your|youre|yours|yourself|yourselves|youve|zero|...)\\b\\s", Pattern.CASE_INSENSITIVE);
              //  Pattern stopWords = Pattern.compile("\\b(?:taken|zero|i|what|these|that|their|the|a|able|about|above|abroad|according|accordingly|accross|actually|after|afterwords|again|against|ago|ahead|aint|all|allow|allows almost|alone|along|alongside|already|)\\b\\s",Pattern.CASE_INSENSITIVE);
                Matcher matcher = stopWords.matcher(string);
               clean = matcher.replaceAll(" ");
               //clean = Arrays.toString(words);
               // clean = Arrays.toString(words);               
                //replace starting "[" and ending "]" and ","
                //clean = clean.substring(1, clean.length()-1).replaceAll(",", "");
               clean= clean.replaceAll("\\s+"," "); 
               clean=clean.trim();
               wr.write(clean+"\n");
               jTextArea1.append("\n"+clean+"\n");
               String tagged = tagger.tagString(clean);
        // Output the result
               //String tagstr[][] = new String[10000][5];
                jTextArea1.append("\n"+tagged+"\n\t");
                String []strArray = tagged.split("\\W+");
               // ArrayList<String> cleaned =new ArrayList<>();
                 ArrayList<String> list = new ArrayList<String>();  

                  for(int i=0;i<strArray.length;i++)
                    {
                        if (strArray[i].substring(strArray[i].lastIndexOf("_")+1).startsWith("J")||strArray[i].substring(strArray[i].lastIndexOf("_")+1).startsWith("V"))
                         {
                             list.add(strArray[i].split("_")[0]);
                          }
                     }
                     for(int i=0;i<list.size();i++)
                     {
                          System.out.println(list.get(i));
                     }
               
                /*String[] strclean= new String[cleaned.size()];
                for(int j=0; j<strclean.length; j++)
                {
                    strclean[j]= cleaned.get(j).toString();
                    System.out.println(strclean[j]);
                }*/
               
               for(int i=0 ; i<list.size(); i++)
                {
                   
                        String sql = "INSERT INTO "+str_array[1]+" VALUES ('"+list.get(i)+"')";
                        stmt.executeUpdate(sql);
                   
                   
                }
            }
            //        bwf.close();
           wr.close();
            br.close();
           conn.close();
        }
        catch(Exception e){
        System.out.println(e.getMessage());
}
        // TODO add your handling code here:
    
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrainingClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrainingClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrainingClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrainingClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrainingClass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
